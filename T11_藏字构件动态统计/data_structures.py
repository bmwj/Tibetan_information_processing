# -*- coding: UTF-8 -*-
# 数据结构模块 - 包含所有常量和数据结构定义

# 30个辅音
consonant = ['\u0F40', '\u0F41', '\u0F42', '\u0F44', '\u0F45', '\u0F46', '\u0F47', '\u0F49',
             '\u0F4F', '\u0F50', '\u0F51', '\u0F53', '\u0F54', '\u0F55', '\u0F56', '\u0F58',
             '\u0F59', '\u0F5A', '\u0F5B', '\u0F5D', '\u0F5E', '\u0F5F', '\u0F60', '\u0F61',
             '\u0F62', '\u0F63', '\u0F64', '\u0F66', '\u0F67', '\u0F68']

# 4个元音
tibetan_vowel = ['\u0F72', '\u0F74', '\u0F7A', '\u0F7C']

# 表1：上加+基字 的叠加组合
up_base_2 = ['རྐ', 'རྒ', 'རྔ', 'རྗ', 'རྙ', 'རྟ', 'རྡ', 'རྣ', 'རྦ', 'རྨ', 'རྩ', 'རྫ', 'ལྐ', 'ལྒ', 'ལྔ',
             'ལྕ', 'ལྗ', 'ལྟ', 'ལྡ', 'ལྤ', 'ལྦ', 'ལྷ', 'སྐ', 'སྒ', 'སྔ', 'སྙ', 'སྟ', 'སྡ', 'སྣ', 'སྤ',
             'སྦ', 'སྨ', 'སྩ']

# 表2：基字+下加 的叠加组合
base_down_2 = ['ཀྱ', 'ཁྱ', 'གྱ', 'པྱ', 'ཕྱ', 'བྱ', 'མྱ', 'ཀྲ', 'ཁྲ', 'གྲ', 'ཏྲ', 'ཐྲ', 'དྲ', 'པྲ', 'ཕྲ',
               'བྲ', 'སྲ', 'ཧྲ', 'ཀླ', 'གླ', 'བླ', 'ཟླ', 'རླ', 'སླ', 'ཀྭ', 'ཁྭ', 'གྭ', 'ཉྭ', 'དྭ', 'ཚྭ',
               'ཞྭ', 'ཟྭ', 'རྭ', 'ལྭ', 'ཤྭ', 'ཧྭ']

# 表3：后加字与再后加字的组合
after_reafter_2 = ['ནད', 'རད', 'ལད', 'གས', 'ངས', 'བས', 'མས']

# 表:4：上加+基字+下加 的叠加组合
up_base_down_3 = ['རྐྱ', 'རྒྱ', 'རྨྱ', 'སྐྱ', 'སྒྱ', 'སྤྱ', 'སྦྱ', 'སྨྱ', 'སྐྲ', 'སྒྲ', 'སྣྲ', 'སྤྲ', 'སྦྲ', 'སྨྲ',
                  'རྩྭ']

# 表5：基字+后加+再后加（其中 14 个有歧义）
base_after_reafter_3 = ['བགས', 'མབས', 'གགས', 'བངས', 'དངས', 'གངས', 'འངས', 'གམས', 'མམས', 'བབས', 'མངས', 'གབས', 'བམས',
                        'འམས']

# 表6：特殊的两个字（基字+下加字+再下加字）
base_under_reunder_3 = ['གྲྭ', 'ཕྱྭ']

# 黏着词后缀
adhering = ['འུའི', 'འི', 'འོ', 'འང', 'འུ']

# 元音
vowel = {'ི': 0, 'ུ': 0, 'ེ': 0, 'ོ': 0, '#':0}

# 前加字符
front_char = {'ག': 0, 'ད': 0, 'བ': 0, 'མ': 0, 'འ': 0, '#':0}

# 上加字符
up_char = {'ར': 0, 'ལ': 0, 'ས': 0, '#':0}

# 基字
base_char = {'ཀ': 0, 'ཁ': 0, 'ག': 0, 'ང': 0, 'ཅ': 0, 'ཆ': 0, 'ཇ': 0, 'ཉ': 0, 'ཏ': 0, 'ཐ': 0, 'ད': 0, 'ན': 0, 'པ': 0, 'ཕ': 0,
             'བ': 0, 'མ': 0, 'ཙ': 0, 'ཚ': 0, 'ཛ': 0, 'ཝ': 0, 'ཞ': 0, 'ཟ': 0, 'འ': 0, 'ཡ': 0, 'ར': 0, 'ལ': 0, 'ཤ': 0, 'ས': 0,
             'ཧ': 0, 'ཨ': 0}

# 叠加基字
base_overlied = {'ྐ': 0, 'ྑ': 0, 'ྒ': 0, 'ྔ': 0, 'ྕ': 0, 'ྖ': 0, 'ྗ': 0, 'ྙ': 0, 'ྟ': 0, 'ྠ': 0, 'ྡ': 0, 'ྣ': 0, 'ྤ': 0, 'ྥ': 0, 'ྦ': 0, 'ྨ': 0,
                 'ྩ': 0, 'ྪ': 0, 'ྫ': 0, 'ྺ': 0, 'ྮ': 0, 'ྯ': 0, 'ྰ': 0, 'ྱ': 0, 'ྲ': 0, 'ླ': 0, 'ྴ': 0, 'ྶ': 0, 'ྷ': 0, 'ྸ': 0}

# 下加字
down_char = {'ྭ': 0, 'ྱ': 0, 'ྲ': 0, 'ླ': 0, '#':0}

# 再下加字
redown_char = {'ྭ': 0, '#':0}

# 后加字
rear_char = {'ག': 0, 'ང': 0, 'ད': 0, 'ན': 0, 'བ': 0, 'མ': 0, 'འ': 0, 'ར': 0, 'ལ': 0, 'ས': 0, '#':0}

# 再后加字
rerear_char = {'ད': 0, 'ས': 0, '#':0}

# 分隔符
split_char = {'ༀ': 0, '༁': 0, '༂': 0, '༃': 0, '༄': 0, '༆': 0, '༇': 0, '༈': 0, '༉': 0, '༊': 0,
              '་': 0, '༌': 0, '།': 0, '༎': 0, '༏': 0, '༐': 0, '༑': 0, '༒': 0, '༓': 0, '༔': 0, '༕': 0,
              '༖': 0, '༗': 0, '༘': 0, '༙': 0, '༚': 0, '༛': 0, '༜': 0, '༝': 0, '༞': 0, '༟': 0, '༠': 0,
              '༡': 0, '༢': 0, '༣': 0, '༤': 0, '༥': 0, '༦': 0, '༧': 0, '༨': 0, '༩': 0, '༪': 0, '༫': 0,
              '༬': 0, '༭': 0, '༮': 0, '༯': 0, '༰': 0, '༱': 0, '༲': 0, '༳': 0, '༴': 0, '༵': 0, '༶': 0,
              '༷': 0, '༸': 0, '༺': 0, '༻': 0, '༼': 0, '༽': 0, '༾': 0, '༿': 0, '྾': 0, '྿': 0, '࿀': 0,
              '࿁': 0, '࿂': 0, '࿃': 0, '࿄': 0, '࿅': 0, '࿆': 0, '࿇': 0, '࿈': 0, '࿉': 0, '࿊': 0, '࿋': 0,
              '࿌': 0, '࿎': 0, '࿏': 0, '࿐': 0, '࿑': 0, '࿒': 0, '࿓': 0, '࿔': 0, '\u0FD5': 0, '\u0FD6':0,
              '\u0FD7': 0, '\u0FD8':0, '࿙': 0, '࿚': 0}

# 重置所有计数器
def reset_counters():
    """重置所有计数器"""
    for key in vowel:
        vowel[key] = 0
    for key in front_char:
        front_char[key] = 0
    for key in up_char:
        up_char[key] = 0
    for key in base_char:
        base_char[key] = 0
    for key in base_overlied:
        base_overlied[key] = 0
    for key in down_char:
        down_char[key] = 0
    for key in redown_char:
        redown_char[key] = 0
    for key in rear_char:
        rear_char[key] = 0
    for key in rerear_char:
        rerear_char[key] = 0
    for key in split_char:
        split_char[key] = 0